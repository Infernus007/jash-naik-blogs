---
import { siteConfig } from '../../site.config';

interface Props {
  type: 'article' | 'website' | 'person' | 'organization' | 'faq' | 'howto';
  title: string;
  description: string;
  url?: string;
  image?: string;
  publishedDate?: Date;
  modifiedDate?: Date;
  author?: string;
  tags?: string[];
  faqData?: Array<{ question: string; answer: string }>;
  steps?: Array<{ name: string; text: string; image?: string }>;
}

const { 
  type, 
  title, 
  description, 
  url, 
  image, 
  publishedDate, 
  modifiedDate, 
  author = siteConfig.author.name,
  tags = [],
  faqData = [],
  steps = []
} = Astro.props;

const pageUrl = url || new URL(Astro.url.pathname, Astro.site).toString();
const resolvedImage = image ? (image.startsWith('http') ? image : new URL(image.startsWith('/') ? image : `/assets/${image}`, Astro.site).toString()) : new URL("/og-image.png", Astro.site).toString();

// Generate structured data based on type
let structuredData = {};

switch (type) {
  case 'article':
    structuredData = {
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": title,
      "description": description,
      "image": {
        "@type": "ImageObject",
        "url": resolvedImage,
        "width": 1200,
        "height": 630
      },
      "author": {
        "@type": "Person",
        "name": author,
        "url": siteConfig.author.linkedin || siteConfig.url,
        "sameAs": [
          siteConfig.author.twitter,
          siteConfig.author.linkedin,
          siteConfig.author.github
        ].filter(Boolean)
      },
      "publisher": {
        "@type": "Organization",
        "name": siteConfig.name,
        "logo": {
          "@type": "ImageObject",
          "url": new URL("/logo.svg", Astro.site).toString()
        }
      },
      "datePublished": publishedDate?.toISOString(),
      "dateModified": (modifiedDate || publishedDate)?.toISOString(),
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": pageUrl
      },
      "keywords": tags.join(", "),
      "articleSection": "Technology",
      "inLanguage": "en-US"
    };
    break;

  case 'website':
    structuredData = {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": title,
      "description": description,
      "url": pageUrl,
      "potentialAction": {
        "@type": "SearchAction",
        "target": {
          "@type": "EntryPoint",
          "urlTemplate": `${siteConfig.url}/search?q={search_term_string}`
        },
        "query-input": "required name=search_term_string"
      },
      "author": {
        "@type": "Person",
        "name": siteConfig.author.name,
        "url": siteConfig.author.linkedin || siteConfig.url
      },
      "copyrightYear": new Date().getFullYear(),
      "inLanguage": "en-US"
    };
    break;

  case 'person':
    structuredData = {
      "@context": "https://schema.org",
      "@type": "Person",
      "name": siteConfig.author.name,
      "jobTitle": "Full Stack Developer & AI Security Researcher",
      "description": description,
      "url": pageUrl,
      "image": resolvedImage,
      "sameAs": [
        siteConfig.author.twitter,
        siteConfig.author.linkedin,
        siteConfig.author.github
      ].filter(Boolean),
      "knowsAbout": [
        "Artificial Intelligence",
        "Cybersecurity",
        "Machine Learning",
        "Web Development",
        "Zero Trust Architecture",
        "Supply Chain Security"
      ],
      "alumniOf": "Your University", // Update with actual education
      "worksFor": {
        "@type": "Organization",
        "name": "Independent Researcher"
      }
    };
    break;

  case 'faq':
    structuredData = {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": faqData.map(item => ({
        "@type": "Question",
        "name": item.question,
        "acceptedAnswer": {
          "@type": "Answer",
          "text": item.answer
        }
      }))
    };
    break;

  case 'howto':
    structuredData = {
      "@context": "https://schema.org",
      "@type": "HowTo",
      "name": title,
      "description": description,
      "image": resolvedImage,
      "totalTime": "PT30M", // Adjust as needed
      "estimatedCost": {
        "@type": "MonetaryAmount",
        "currency": "USD",
        "value": "0"
      },
      "step": steps.map((step, index) => ({
        "@type": "HowToStep",
        "position": index + 1,
        "name": step.name,
        "text": step.text,
        ...(step.image && {
          "image": step.image.startsWith('http') ? step.image : new URL(step.image, Astro.site).toString()
        })
      }))
    };
    break;

  default:
    structuredData = {
      "@context": "https://schema.org",
      "@type": "WebPage",
      "name": title,
      "description": description,
      "url": pageUrl,
      "image": resolvedImage
    };
}

// Clean up undefined values
const cleanStructuredData = JSON.parse(JSON.stringify(structuredData, (key, value) => 
  value === undefined ? undefined : value
));
---

<script type="application/ld+json" set:html={JSON.stringify(cleanStructuredData)} is:inline />
