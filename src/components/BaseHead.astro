---
/**
 * @desc Enhanced base head component with comprehensive SEO optimizations
 */

// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/global.css";
import '@fontsource-variable/gabarito';
import { SEO } from "astro-seo";
import { SITE_TITLE, SITE_DESCRIPTION, TWITTER_CREATOR } from "../consts";
import { siteConfig } from "../site.config";
import { ViewTransitions } from "astro:transitions";

interface Props {
	title: string;
	description: string;
	image?: string;
	type?: 'website' | 'article';
	publishedDate?: Date;
	modifiedDate?: Date;
	tags?: string[];
	author?: string;
	canonical?: string;
	noindex?: boolean;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
	title = SITE_TITLE,
	description = SITE_DESCRIPTION,
	image = "/og-image.png",
	type = "website",
	publishedDate,
	modifiedDate,
	tags = [],
	author = siteConfig.author.name,
	canonical,
	noindex = false,
} = Astro.props;

// Enhanced image resolution for hero images and assets
const resolveImageUrl = (imageUrl: string) => {
	if (!imageUrl) return new URL("/og-image.png", Astro.site).toString();
	
	// If it's already a full URL, return as is
	if (imageUrl.startsWith('http')) return imageUrl;
	
	// If it starts with /, treat as public asset
	if (imageUrl.startsWith('/')) {
		return new URL(imageUrl, Astro.site).toString();
	}
	
	// Otherwise, treat as asset from src/assets or public/assets
	const publicAssetUrl = new URL(`/assets/${imageUrl}`, Astro.site).toString();
	return publicAssetUrl;
};

const resolvedImageWithDomain = resolveImageUrl(image);
const resolvedCanonical = canonical ? new URL(canonical, Astro.site).toString() : canonicalURL.toString();
const resolvedFaviconWithDomain = new URL("/favicon.svg", Astro.site).toString();

// Generate rich keywords
const allKeywords = [
	...siteConfig.keywords,
	...tags,
	author,
	"tech blog",
	"programming tutorials"
].filter(Boolean).join(", ");

// Structured data for articles
const structuredData = type === 'article' && publishedDate ? {
	"@context": "https://schema.org",
	"@type": "Article",
	"headline": title,
	"description": description,
	"image": resolvedImageWithDomain,
	"author": {
		"@type": "Person",
		"name": author,
		"url": siteConfig.author.linkedin || siteConfig.url
	},
	"publisher": {
		"@type": "Organization",
		"name": siteConfig.name,
		"logo": {
			"@type": "ImageObject",
			"url": new URL("/logo.svg", Astro.site).toString()
		}
	},
	"datePublished": publishedDate.toISOString(),
	"dateModified": (modifiedDate || publishedDate).toISOString(),
	"mainEntityOfPage": {
		"@type": "WebPage",
		"@id": resolvedCanonical
	}
} : null;

// Website structured data for homepage
const websiteStructuredData = type === 'website' ? {
	"@context": "https://schema.org",
	"@type": "WebSite",
	"name": siteConfig.name,
	"description": description,
	"url": siteConfig.url,
	"author": {
		"@type": "Person",
		"name": siteConfig.author.name,
		"url": siteConfig.author.linkedin || siteConfig.url
	},
	"potentialAction": {
		"@type": "SearchAction",
		"target": {
			"@type": "EntryPoint",
			"urlTemplate": `${siteConfig.url}/search?q={search_term_string}`
		},
		"query-input": "required name=search_term_string"
	}
} : null;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
<meta name="generator" content={Astro.generator} />

<!-- Preconnect to external domains for performance -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

<!-- SEO Meta Tags -->
<title>{title}</title>
<meta name="description" content={description} />
<meta name="keywords" content={allKeywords} />
<meta name="author" content={author} />
<meta name="robots" content={noindex ? "noindex,nofollow" : "index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1"} />

<!-- Enhanced Blog Article Meta Tags -->
{type === 'article' && (
  <>
    <meta name="article:author" content={author} />
    {publishedDate && <meta name="article:published_time" content={publishedDate.toISOString()} />}
    {modifiedDate && <meta name="article:modified_time" content={modifiedDate.toISOString()} />}
    {tags && tags.length > 0 && tags.map(tag => (
      <meta name="article:tag" content={tag} />
    ))}
    <meta name="article:section" content="Technology" />
  </>
)}

<!-- Canonical URL -->
<link rel="canonical" href={resolvedCanonical} />

<!-- Theme and Mobile Optimization -->
<meta name="theme-color" content="#0B1120" media="(prefers-color-scheme: dark)" />
<meta name="theme-color" content="#f8fafc" media="(prefers-color-scheme: light)" />
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

<!-- Fonts with performance optimization -->
<link 
	href="https://fonts.googleapis.com/css2?family=Gabarito:wght@400;500;600;700&family=Gabarito+Mono:wght@400;500;600;700&display=swap" 
	rel="stylesheet" 
/>

<!-- Favicon and Icons -->
<link rel="icon" type="image/svg+xml" href={resolvedFaviconWithDomain} />
<link rel="apple-touch-icon" href="/favicon.ico" />

<!-- RSS Feed -->
<link rel="alternate" type="application/rss+xml" title={siteConfig.name} href="/rss.xml" />

<!-- Advanced SEO Component -->
<SEO
	title={title}
	description={description}
	canonical={resolvedCanonical}
	openGraph={{
		basic: {
			url: resolvedCanonical,
			title: title,
			type: type === 'article' ? 'article' : 'website',
			image: resolvedImageWithDomain,
		},
		optional: {
			description: description,
			siteName: siteConfig.name,
			locale: "en_US",
		},
		image: {
			alt: title,
			width: 1200,
			height: 630,
			type: "image/png",
		},
		article: type === 'article' && publishedDate ? {
			publishedTime: publishedDate.toISOString(),
			modifiedTime: (modifiedDate || publishedDate).toISOString(),
			authors: [author],
			tags: tags,
		} : undefined,
	}}
	twitter={{
		card: "summary_large_image",
		site: TWITTER_CREATOR,
		creator: TWITTER_CREATOR,
		title: title,
		description: description,
		image: resolvedImageWithDomain,
		imageAlt: title,
	}}		extend={{
			meta: [
				// Additional SEO meta tags
				{ name: "format-detection", content: "telephone=no" },
				{ name: "msapplication-TileColor", content: "#0B1120" },
				{ name: "application-name", content: siteConfig.name },
				// Reading time and content meta for articles
				...(type === 'article' ? [
					{ name: "reading-time", content: "5-10 minutes" },
					{ name: "content-language", content: "en" },
				] : []),
			],
		}}
/>

<!-- Performance optimizations -->
<meta name="dns-prefetch" content="//fonts.googleapis.com" />
<meta name="dns-prefetch" content="//fonts.gstatic.com" />

<!-- Security headers -->
<meta http-equiv="X-Content-Type-Options" content="nosniff" />
<meta http-equiv="X-Frame-Options" content="DENY" />
<meta http-equiv="X-XSS-Protection" content="1; mode=block" />

<!-- Structured Data -->
{structuredData && (
	<script type="application/ld+json" set:html={JSON.stringify(structuredData)} is:inline />
)}

{websiteStructuredData && (
	<script type="application/ld+json" set:html={JSON.stringify(websiteStructuredData)} is:inline />
)}

<!-- View Transitions for better UX -->
<ViewTransitions />
