---
---

<nav class="toc w-fit">
    <h2 class="text-xl font-bold mb-4">On this page</h2>
    <ul id="toc-list" class="space-y-2 relative">
      <div id="toc-indicator" class="absolute left-0 w-1 bg-blue-500 transition-all duration-300 rounded-full"></div>
    </ul>
  </nav>
  
  <script>
    function initToc() {
      function createToc() {
        const headings = Array.from(document.querySelectorAll(' h2,  h3'));
        const tocList = document.getElementById('toc-list');
        const tocItems = [];
  
        console.log('Headings found:', headings);
        headings.forEach((heading) => {
          const item = document.createElement('li');
          const link = document.createElement('a');
          link.textContent = heading.textContent;
          link.href = `#${heading.id}`;
          link.classList.add('block', 'py-1', 'px-3', 'hover:text-blue-500', 'transition-colors', 'rounded-full');
          link.dataset.headingLink = '';
  
          if (heading.tagName === 'H3') {
            item.classList.add('ml-4', 'mt-1');
            link.classList.add('text-sm');
          }
  
          item.appendChild(link);
          tocItems.push(item);
        });
  
        tocList.append(...tocItems);
      }
  
      function updateTocIndicator() {
        const tocLinks = document.querySelectorAll('[data-heading-link]');
        const indicator = document.getElementById('toc-indicator');
  
        const observerOptions = {
          root: null,
          rootMargin: '-100px 0px -50% 0px',
          threshold: [0, 1]
        };
  
        let currentActiveHeading = null;
  
        const headingObserver = new IntersectionObserver(entries => {
          let topVisibleHeading = null;
  
          entries.forEach(entry => {
            console.log('Intersection entry:', entry.target.id, 'intersectionRatio:', entry.intersectionRatio);
            
            if (entry.isIntersecting) {
              if (!topVisibleHeading || entry.target.offsetTop < topVisibleHeading.offsetTop) {
                topVisibleHeading = entry.target;
              }
            }
          });
  
          if (topVisibleHeading && topVisibleHeading !== currentActiveHeading) {
            currentActiveHeading = topVisibleHeading;
            const activeId = currentActiveHeading.id;
            const activeLink = document.querySelector(`[href="#${activeId}"]`);
            console.log("Active heading:", activeId);
            
            if (activeLink) {
              tocLinks.forEach(link => {
                link.classList.remove('text-blue-500', 'font-semibold', 'bg-gray-100');
              });
              activeLink.classList.add('text-blue-500', 'font-semibold', 'bg-gray-100');
              
              const linkRect = activeLink.getBoundingClientRect();
              const navRect = activeLink.closest('nav').getBoundingClientRect();
              
              indicator.style.top = `${linkRect.top - navRect.top}px`;
              indicator.style.height = `${linkRect.height}px`;
            }
          }
        }, observerOptions);
  
        document.querySelectorAll(' h2,  h3').forEach(heading => headingObserver.observe(heading));
      }
  
      createToc();
      updateTocIndicator();
  
      // Update on scroll (debounced)
      let scrollTimeout;
      window.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(updateTocIndicator, 100);
      });
    }
  
    // Run the initialization when the DOM is loaded
    document.addEventListener('astro:page-load', initToc);
  </script>
  
  <style>
    .toc {
      position: sticky;
      top: 2rem;
      max-height: calc(100vh - 4rem);
      overflow-y: auto;
      padding-right: 1rem;
    }
  </style>
  