---
import { type CollectionEntry, getCollection, getEntries } from "astro:content";
import IndexLayout from "../../layouts/indexLayout.astro";
import { Image } from "astro:assets";
import "../../styles/BlogPost.css";
import MyCard from "../../components/blog/Card";
import { AcmeLogo } from "../../components/Navbar/Logo.tsx";
import SummaryDrawer from "../../components/blog/SummaryDrawer.tsx";
import ImageWrapper from "../../components/blog/AssetsWrapper/image.astro"
import { Button } from "@nextui-org/button";
import { Skeleton } from "@nextui-org/skeleton";
import { getImagePromise } from "../../utils/utils.ts";
import { siteConfig } from '../../site.config';

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}

type Props = CollectionEntry<"blog">;
const post = Astro.props;
const { Content, headings } = await post.render();

// Get all posts for suggestions
const allPosts = await getCollection("blog");
const currentIndex = allPosts.findIndex(p => p.slug === post.slug);

// Get next and previous posts
const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;
const prevPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;

// Calculate similarity scores for suggestions
const getSimilarityScore = (post1: CollectionEntry<"blog">, post2: CollectionEntry<"blog">) => {
  let score = 0;
  
  // Check for same group
  if (post1.data.group === post2.data.group) score += 2;
  
  // Check for common tags
  if (post1.data.tags && post2.data.tags) {
    const commonTags = post1.data.tags.filter((tag: string) => post2.data.tags?.includes(tag));
    score += commonTags.length;
  }
  
  // Check for related posts
  if (post1.data.relatedPosts?.some((ref: string) => ref === post2.slug)) score += 1;
  if (post2.data.relatedPosts?.some((ref: string) => ref === post1.slug)) score += 1;
  
  return score;
};

// Get suggested posts
const suggestedPosts = allPosts
  .filter(p => p.slug !== post.slug)
  .map(p => ({
    post: p,
    score: getSimilarityScore(post, p)
  }))
  .sort((a, b) => b.score - a.score)
  .slice(0, 3)
  .map(({ post }) => post);

const geminiApiKey = import.meta.env.GEMINI_API_KEY;
const showAiFeatures = siteConfig.enableAiFeatures;
---

<IndexLayout title={post.data.title} description={post.data.description} image={post.data.heroImage}>
  <div class="mb-6 transition-all duration-300" id="header">
    <div class="flex items-center space-x-2 mb-4">
      <a
        href="/"
        class="flex gap-2 justify-center items-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-all duration-300 ease-in-out transform hover:scale-105 hover:shadow-md rounded-lg p-2"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 transition-transform duration-300 ease-in-out group-hover:-translate-x-1"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        <span class="text-lg font-semibold text-gray-800 dark:text-white group-hover:underline">Back</span>
      </a>
    </div>

    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 max-w-4xl">
      <div class="flex flex-col sm:flex-row items-start sm:items-center gap-4 w-full sm:w-auto">
        <AcmeLogo />
        <div class="w-full sm:w-auto">
          <h1 class="font-semibold text-gray-900 dark:text-white mb-2 sm:mb-0">
            Jash Naik
          </h1>
          <div class="flex flex-wrap items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <span>{post.data.pubDate.toDateString()}</span>
            <span class="flex items-center gap-1 max-w-full">
              <span class="w-2 h-2 bg-purple-500 rounded-full flex-shrink-0"></span>
              <span class="truncate">
                <span class="text-purple-500">{post.data.group}</span>
                <span class="mx-1">/</span>
                <span class="text-gray-900 dark:text-white">{post.data.title}</span>
              </span>
            </span>
          </div>
        </div>
      </div>
      {showAiFeatures && <SummaryDrawer client:load geminiApiKey={geminiApiKey} class="mt-4 sm:mt-0"/>}
    </div>
  </div>

  <Button 
    id="zenModeToggle"
    variant="bordered"
    radius="full"
    size="sm"
    color="primary"
    class="fixed bottom-4 right-4 z-50"
  >
    Toggle Zen Mode
  </Button>

  <div class="flex flex-col-reverse lg:flex-row relative transition-all duration-300" id="layoutContainer">
    <div class="w-full lg:w-3/4 py-4 mx-auto transition-all duration-300" id="mainContent">
      <div class="mb-8">
        <div class="content prose prose-headings:text-foreground prose-p:text-foreground prose-a:text-sky-700 dark:prose-a:text-fuchsia-600 prose-code:text-sky-700 dark:prose-code:text-fuchsia-500 prose-ul:text-foreground prose-strong:text-foreground prose-strong:font-semibold prose-figcaption:text-foreground dark:prose-li:text-foreground max-w-none">
          {post.data.heroImage && <Image src={getImagePromise(post.data.heroImage)} alt={post.data.title} width={1000} height={1000} class="w-full h-auto rounded-2xl"/>}
          <Content components={{img:ImageWrapper}}/>
          {post.data.tags && <div class="flex flex-wrap gap-2">
            {post.data.tags.map((tag: string) => (
              <Button variant="bordered" radius="full" size="sm" color="primary">#{tag}</Button>
            ))}
          </div>}
        </div>

        <!-- Navigation -->
        <div class="flex justify-between items-center mt-12 pt-8 border-t">
          {prevPost && (
            <a href={`/blog/${prevPost.slug}`} class="flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span>Previous: {prevPost.data.title}</span>
            </a>
          )}
          {nextPost && (
            <a href={`/blog/${nextPost.slug}`} class="flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors">
              <span>Next: {nextPost.data.title}</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
          )}
        </div>

        <!-- Suggested Posts -->
        {suggestedPosts.length > 0 && (
          <section class="mt-12 border-t pt-8">
            <h2 class="text-2xl font-bold mb-6">You May Also Like</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {suggestedPosts.map((suggestedPost) => (
                <MyCard
                  title={suggestedPost.data.title}
                  description={suggestedPost.data.description}
                  href={`/blog/${suggestedPost.slug}`}
                >
                   <div class="m-2 rounded-md h-[250px] relative w-full">
    {suggestedPost.data.heroImage ? (
      <Image
        src={getImagePromise(suggestedPost.data.heroImage)}
        alt={suggestedPost.data.title}
        width={1000}
        height={1000}
        class="rounded-2xl h-full w-full"
        style={{ objectFit: 'cover' }}
      />
    ) : (
     <div 
        class="h-full w-full rounded-2xl relative overflow-hidden group cursor-pointer"
        style={{
          background: `linear-gradient(135deg, 
            hsl(${Math.floor(Math.random() * 360)}, 75%, 55%) 0%, 
            hsl(${Math.floor(Math.random() * 360)}, 80%, 60%) 50%, 
            hsl(${Math.floor(Math.random() * 360)}, 70%, 45%) 100%)`,
          filter: 'saturate(1.3) contrast(1.2)'
        }}
      >
        {/* Mesh gradient overlay for depth */}
        <div 
          class="absolute inset-0 opacity-30"
          style={{
            background: `
              radial-gradient(circle at 20% 80%, hsla(${Math.floor(Math.random() * 360)}, 100%, 80%, 0.4) 0%, transparent 50%),
              radial-gradient(circle at 80% 20%, hsla(${Math.floor(Math.random() * 360)}, 100%, 75%, 0.3) 0%, transparent 50%),
              radial-gradient(circle at 40% 40%, hsla(${Math.floor(Math.random() * 360)}, 100%, 70%, 0.2) 0%, transparent 50%)`
          }}
        ></div>
        
        {/* Floating geometric elements */}
        <div class="absolute top-6 right-8 w-12 h-12 border-2 border-white/30 rounded-lg rotate-12 group-hover:rotate-45 transition-transform duration-700"></div>
        <div class="absolute bottom-8 left-8 w-16 h-2 bg-white/20 rounded-full transform -rotate-12 group-hover:rotate-12 transition-transform duration-500"></div>
        <div class="absolute top-1/3 left-1/4 w-6 h-6 bg-white/25 rotate-45 rounded-sm group-hover:scale-125 transition-transform duration-300"></div>
        <div class="absolute bottom-1/3 right-1/3 w-8 h-8 border border-white/40 rounded-full group-hover:border-white/60 transition-colors duration-300"></div>
        
        {/* Dynamic noise texture */}
        <div class="absolute inset-0 opacity-10 mix-blend-overlay" style={{ backgroundImage: `url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E")` }}></div>
        
        {/* Strong contrast overlay for text readability */}
        <div class="absolute inset-0 bg-gradient-to-br from-black/40 via-black/20 to-black/50"></div>
        
        {/* Content container */}
        <div class="relative h-full w-full flex flex-col items-center justify-center p-6 z-10">
          {/* Title initials with enhanced contrast */}
          <div 
            class="text-5xl font-black mb-3 group-hover:scale-110 transition-all duration-300 select-none"
            style={{ 
              color: 'white',
              textShadow: '0 2px 8px rgba(0,0,0,0.8), 0 0 0 2px rgba(0,0,0,0.3)',
              WebkitTextStroke: '1px rgba(0,0,0,0.3)'
            }}
          >
            {suggestedPost.data.title.split(' ').map(word => word[0]).join('').slice(0, 3)}
          </div>
          
          {/* Modern decorative elements */}
          <div class="flex items-center gap-2 mb-4">
            <div class="w-8 h-0.5 bg-white/80 rounded-full group-hover:w-12 transition-all duration-300"></div>
            <div class="w-2 h-2 bg-white/60 rounded-full"></div>
            <div class="w-8 h-0.5 bg-white/80 rounded-full group-hover:w-12 transition-all duration-300"></div>
          </div>
          
          {/* Subtle accent text */}
          <div class="text-white/70 text-xs font-medium uppercase tracking-wider">
            Blog Post
          </div>
        </div>
        
        {/* Subtle glow effect on hover */}
        <div class="absolute inset-0 rounded-2xl bg-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      </div>
    )}
  </div>
                </MyCard>
              ))}
            </div>
          </section>
        )}
      </div>
    </div>
    <aside class="w-full min-w-[15rem] lg:w-1/4 p-4 lg:sticky lg:top-12 lg:self-start transition-all duration-300" id="sidebar">
      <div class="w-full relative lg:min-h-[24rem]">
        <button 
          class="w-full flex items-center justify-between font-bold mb-4 text-lg lg:pointer-events-none" 
          id="toc-toggle"
          aria-expanded="false"
          aria-controls="toc-container"
        >
          <span>Table of Contents</span>
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class="h-5 w-5 lg:hidden transition-transform duration-300" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        <div class="overflow-hidden lg:overflow-visible transition-all duration-300 ease-in-out h-0 lg:h-auto" id="toc-container">
          <div class="relative w-full">
            <div
              id="toc-highlighter"
              class="absolute left-0 border-2 border-black dark:border-white rounded-full transition-all duration-300 ease-in-out opacity-0"
              style="height: 2rem; top: 0; width: 0;"
            ></div>

            {/* Static Skeleton loader */}
            <div id="toc-skeleton" class="space-y-3">
              {Array(5).fill(null).map((_, i) => (
                <div class="flex items-center mb-2">
                  <Skeleton 
                    client:load
                    className={`h-6 rounded-lg ${i === 0 ? 'w-full' : i === 1 ? 'w-11/12' : i === 2 ? 'w-10/12' : 'w-9/12'}`}
                  />
                </div>
              ))}
            </div>

            {/* Actual TOC content */}
            <ul id="toc" class="space-y-1 w-full lg:min-h-[200px] opacity-0 transition-opacity duration-300">
              {headings.filter((heading) => heading.depth > 1).map((heading) => (
                <li class={`toc-item depth-${heading.depth}`}>
                  <a
                    href={`#${heading.slug}`}
                    class="toc-link block hover:text-blue-500 transition-colors duration-300 ease-in-out py-1 px-2"
                    data-depth={heading.depth}
                  >
                    {heading.text}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </aside>
  </div>
  
  <script>
    document.addEventListener('astro:page-load', () => {
      // Handle Table of Contents (TOC) interactions
      const tocLinks = document.querySelectorAll<HTMLAnchorElement>(".toc-link");
      const headingElements = Array.from(document.querySelectorAll<HTMLHeadingElement>("h2, h3, h4, h5, h6"));
      const tocHighlighter = document.getElementById("toc-highlighter") as HTMLElement | null;
      const toc = document.getElementById("toc");
      const tocSkeleton = document.getElementById("toc-skeleton");
      const tocContainer = document.getElementById("toc-container") as HTMLElement;
      const tocToggle = document.getElementById('toc-toggle');
      const tocArrow = tocToggle?.querySelector('svg');

      tocToggle?.addEventListener('click', () => {
        const isExpanded = tocToggle.getAttribute('aria-expanded') === 'true';
        tocToggle.setAttribute('aria-expanded', (!isExpanded).toString());
        
        if (tocContainer) {
          if (!isExpanded) {
            tocContainer.style.height = `${tocContainer.scrollHeight}px`;
          } else {
            tocContainer.style.height = '0';
          }
        }
        
        tocArrow?.style.setProperty('transform', isExpanded ? 'rotate(0deg)' : 'rotate(180deg)');
      });

      // Handle window resize for TOC visibility
      const updateTocVisibility = () => {
        if (window.innerWidth >= 1024) { // lg breakpoint
          if (tocContainer) {
            tocContainer.style.removeProperty('height');
            tocToggle?.setAttribute('aria-expanded', 'true');
          }
        } else if (tocToggle?.getAttribute('aria-expanded') === 'false' && tocContainer) {
          tocContainer.style.height = '0';
        }
      };

      // Initial check for large screens
      updateTocVisibility();
      
      // Handle window resize
      window.addEventListener('resize', updateTocVisibility);

      // Ensure TOC is ready before showing it
      requestAnimationFrame(() => {
        if (toc && tocSkeleton) {
          // First make sure TOC is properly positioned
          toc.style.visibility = 'hidden';
          toc.style.opacity = '1';
          
          // Give browser time to calculate layout
          requestAnimationFrame(() => {
            tocSkeleton.style.opacity = '0';
            toc.style.visibility = 'visible';
            
            setTimeout(() => {
              tocSkeleton.style.display = 'none';
            }, 300);
          });
        }
      });
    
      const SCROLL_OFFSET = 100; // Increased offset for better visibility
      let currentActiveHeading: string | null = null;
      
      function updateHighlighter(activeLink: HTMLAnchorElement | null) {
        if (activeLink && tocHighlighter && toc) {
          const linkRect = activeLink.getBoundingClientRect();
          const tocRect = toc.getBoundingClientRect();
          
          // Update highlighter position and dimensions
          tocHighlighter.style.top = `${linkRect.top - tocRect.top}px`;
          tocHighlighter.style.height = `${linkRect.height}px`;
          tocHighlighter.style.width = `${linkRect.width}px`;
          tocHighlighter.style.opacity = '0.1';
          tocHighlighter.style.transform = 'translateX(0)';
        } else if (tocHighlighter) {
          tocHighlighter.style.opacity = '0';
          tocHighlighter.style.transform = 'translateX(-10px)';
        }
      }

      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href')?.slice(1);
          if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - SCROLL_OFFSET;
              window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
              });
            }
          }
        });
      });
    
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const headingId = entry.target.id;
            const tocLink = document.querySelector<HTMLAnchorElement>(`.toc-link[href="#${headingId}"]`);
            
            if (entry.isIntersecting) {
              // Store the current visible heading
              currentActiveHeading = headingId;
              
              // Update active state
              tocLinks.forEach(link => link.classList.remove("active"));
              tocLink?.classList.add("active");
              
              // Update highlighter
              updateHighlighter(tocLink);
            } else if (headingId === currentActiveHeading) {
              // If the current active heading is scrolled out of view,
              // find the next visible heading
              const visibleHeadings = headingElements.filter(heading => {
                const rect = heading.getBoundingClientRect();
                return rect.top > 0 && rect.top < window.innerHeight;
              });
              
              if (visibleHeadings.length > 0) {
                const nextHeading = visibleHeadings[0];
                const nextLink = document.querySelector<HTMLAnchorElement>(
                  `.toc-link[href="#${nextHeading.id}"]`
                );
                
                tocLinks.forEach(link => link.classList.remove("active"));
                nextLink?.classList.add("active");
                updateHighlighter(nextLink);
                currentActiveHeading = nextHeading.id;
              }
            }
          });
        },
        { 
          threshold: 0.2,
          rootMargin: "-100px 0px -66% 0px"
        }
      );
    
      headingElements.forEach((element) => observer.observe(element));

      // Update highlighter on window resize
      window.addEventListener('resize', () => {
        const activeLink = document.querySelector<HTMLAnchorElement>(".toc-link.active");
        updateHighlighter(activeLink);
      });

      // Enhanced Zen Mode Toggle
      const zenModeToggle = document.getElementById('zenModeToggle');
      const header = document.getElementById('header');
      const sidebar = document.getElementById('sidebar');
      const mainContent = document.getElementById('mainContent');
      const layoutContainer = document.getElementById('layoutContainer');
      const mainHeader = document.querySelector('header'); // Main site header
      const leftSidebar = document.querySelector('aside'); // Left sidebar

      let isZenMode = false;

      zenModeToggle?.addEventListener('click', () => {
        isZenMode = !isZenMode;
        
        if (isZenMode) {
          // Hide elements
          header?.classList.add('hidden', 'pointer-events-none');
          sidebar?.classList.add('opacity-0', 'pointer-events-none');
          mainHeader?.classList.add('hidden', 'pointer-events-none');
          leftSidebar?.classList.add('hidden');
          
          // Adjust main content
          mainContent?.classList.remove('lg:w-3/4');
          mainContent?.classList.add('lg:w-full', 'max-w-3xl');
          layoutContainer?.classList.add('justify-center');
          
          // Remove top margin from main content
          document.querySelector('main')?.classList.remove('mt-16');
          document.querySelector('main')?.classList.add('mt-4');

        } else {
          // Show elements
          header?.classList.remove('hidden', 'pointer-events-none');
          sidebar?.classList.remove('opacity-0', 'pointer-events-none');
          mainHeader?.classList.remove('hidden', 'pointer-events-none');
          leftSidebar?.classList.remove('hidden');
          
          // Reset main content
          mainContent?.classList.add('lg:w-3/4');
          mainContent?.classList.remove('lg:w-full', 'max-w-3xl');
          layoutContainer?.classList.remove('justify-center');
          
          // Restore top margin
          document.querySelector('main')?.classList.remove('mt-4');
          document.querySelector('main')?.classList.add('mt-16');

        }
      });
    });
   
  </script>

  <style>
    .toc-link {
      position: relative;
      z-index: 2;
      transition: all 0.3s ease;
      display: block;
      border-radius: 0.375rem;
    }
    .toc-link.active {
      font-weight: bold;
      color: rgb(59 130 246); /* blue-500 */
    }
    #toc-highlighter {
      z-index: 1;
      pointer-events: none;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0.1;
      background-color: rgb(59 130 246); /* blue-500 */
      border: none;
    }
    .toc-item {
      list-style-type: none;
      margin: 0.5rem 0;
    }
    .toc-item.depth-1 { margin-left: 0; }
    .toc-item.depth-2 { margin-left: 0; }
    .toc-item.depth-3,
    .toc-item.depth-4,
    .toc-item.depth-5,
    .toc-item.depth-6 { margin-left: 1rem; }

    .dark #toc-highlighter {
      background-color: rgb(96 165 250); /* blue-400 */
    }
    .dark .toc-link.active {
      color: rgb(96 165 250); /* blue-400 */
    }
  </style>
</IndexLayout>
