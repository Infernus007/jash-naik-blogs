---
import { type CollectionEntry, getCollection, getEntries } from "astro:content";
import IndexLayout from "../../layouts/indexLayout.astro";
import { Image } from "astro:assets";
import "../../styles/BlogPost.css";
import MyCard from "../../components/blog/Card";
import { AcmeLogo } from "../../components/Navbar/Logo.tsx";
import SummaryDrawer from "../../components/blog/SummaryDrawer.tsx";
import ImageWrapper from "../../components/blog/AssetsWrapper/image.astro"
import { Button } from "@nextui-org/button";
import { getImagePromise } from "../../utils/utils.ts";
import { siteConfig } from '../../site.config';

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}

type Props = CollectionEntry<"blog">;
const post = Astro.props;
const { Content, headings } = await post.render();

// Get all posts for suggestions
const allPosts = await getCollection("blog");
const currentIndex = allPosts.findIndex(p => p.slug === post.slug);

// Get next and previous posts
const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;
const prevPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;

// Calculate similarity scores for suggestions
const getSimilarityScore = (post1: CollectionEntry<"blog">, post2: CollectionEntry<"blog">) => {
  let score = 0;
  
  // Check for same group
  if (post1.data.group === post2.data.group) score += 2;
  
  // Check for common tags
  if (post1.data.tags && post2.data.tags) {
    const commonTags = post1.data.tags.filter((tag: string) => post2.data.tags?.includes(tag));
    score += commonTags.length;
  }
  
  // Check for related posts
  if (post1.data.relatedPosts?.some((ref: string) => ref === post2.slug)) score += 1;
  if (post2.data.relatedPosts?.some((ref: string) => ref === post1.slug)) score += 1;
  
  return score;
};

// Get suggested posts
const suggestedPosts = allPosts
  .filter(p => p.slug !== post.slug)
  .map(p => ({
    post: p,
    score: getSimilarityScore(post, p)
  }))
  .sort((a, b) => b.score - a.score)
  .slice(0, 3)
  .map(({ post }) => post);

const geminiApiKey = import.meta.env.GEMINI_API_KEY;
const showAiFeatures = siteConfig.enableAiFeatures;
---

<IndexLayout title={post.data.title} description={post.data.description} image={post.data.heroImage}>
  <div class="mb-6 transition-all duration-300" id="header">
    <div class="flex items-center space-x-2 mb-4">
      <a
        href="/"
        class="flex gap-2 justify-center items-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-all duration-300 ease-in-out transform hover:scale-105 hover:shadow-md rounded-lg p-2"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 transition-transform duration-300 ease-in-out group-hover:-translate-x-1"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        <span class="text-lg font-semibold text-gray-800 dark:text-white group-hover:underline">Back</span>
      </a>
    </div>

    <div class="flex items-center justify-between space-x-4 max-w-4xl">
      <div class="flex flex-wrap items-center space-x-4">
        <AcmeLogo />
        <div>
          <h1 class="font-semibold text-gray-900 dark:text-white">
            Jash Naik
          </h1>
          <div class="flex flex-wrap gap-2 md:gap-0 items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
            <span>{post.data.pubDate.toDateString()}</span>
            <span class="flex items-center">
              <span class="w-2 h-2 bg-purple-500 rounded-full mr-1"></span>
              {post.data.group}
              /
              {post.data.title}
            </span>
          </div>
        </div>
      </div>
      {showAiFeatures && <SummaryDrawer client:load geminiApiKey={geminiApiKey}/>}
    </div>
  </div>

  <Button 
    id="zenModeToggle"
    variant="bordered"
    radius="full"
    size="sm"
    color="primary"
    class="fixed bottom-4 right-4 z-50"
  >
    Toggle Zen Mode
  </Button>

  <div class="flex flex-col-reverse lg:flex-row relative transition-all duration-300" id="layoutContainer">
    <div class="w-full lg:w-3/4 py-4 mx-auto transition-all duration-300" id="mainContent">
      <div class="mb-8">
        <div class="content prose prose-headings:text-foreground prose-p:text-foreground prose-a:text-sky-700 dark:prose-a:text-fuchsia-600 prose-code:text-sky-700 dark:prose-code:text-fuchsia-500 prose-ul:text-foreground prose-strong:text-foreground prose-strong:font-semibold prose-figcaption:text-foreground dark:prose-li:text-foreground max-w-none">
          {post.data.heroImage && <Image src={getImagePromise(post.data.heroImage)} alt={post.data.title} width={1000} height={1000} class="w-full h-auto rounded-2xl"/>}
          <Content components={{img:ImageWrapper}}/>
          {post.data.tags && <div class="flex flex-wrap gap-2">
            {post.data.tags.map((tag: string) => (
              <Button variant="bordered" radius="full" size="sm" color="primary">#{tag}</Button>
            ))}
          </div>}
        </div>

        <!-- Navigation -->
        <div class="flex justify-between items-center mt-12 pt-8 border-t">
          {prevPost && (
            <a href={`/blog/${prevPost.slug}`} class="flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span>Previous: {prevPost.data.title}</span>
            </a>
          )}
          {nextPost && (
            <a href={`/blog/${nextPost.slug}`} class="flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors">
              <span>Next: {nextPost.data.title}</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
          )}
        </div>

        <!-- Suggested Posts -->
        {suggestedPosts.length > 0 && (
          <section class="mt-12 border-t pt-8">
            <h2 class="text-2xl font-bold mb-6">You May Also Like</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {suggestedPosts.map((suggestedPost) => (
                <MyCard
                  title={suggestedPost.data.title}
                  description={suggestedPost.data.description}
                  href={`/blog/${suggestedPost.slug}`}
                >
                  <div class="m-2 rounded-md">
                    <img
                      src={suggestedPost.data.heroImage}
                      alt={suggestedPost.data.title}
                      class="w-full h-auto rounded-2xl"
                    />
                  </div>
                </MyCard>
              ))}
            </div>
          </section>
        )}
      </div>
    </div>
    <aside class="w-full lg:w-1/4 p-4 lg:sticky lg:top-12 lg:self-start transition-all duration-300" id="sidebar">
      <h2 class="font-bold mb-4 text-lg">Table of Contents</h2>
      <div class="relative">
        <div
          id="toc-highlighter"
          class="absolute left-0 border-2 border-black dark:border-white rounded-full transition-all duration-300 ease-in-out"
          style="height: 2rem; top: 0; width: 0;"
        ></div>
        <ul id="toc" class="space-y-1 relative">
          {headings.filter((heading) => heading.depth > 1).map((heading) => (
            <li class={`toc-item depth-${heading.depth}`}>
              <a
                href={`#${heading.slug}`}
                class="toc-link block hover:text-blue-500 transition-colors duration-300 ease-in-out py-1 px-2"
                data-depth={heading.depth}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </aside>
  </div>
  
  <script>
    document.addEventListener('astro:page-load', () => {
      // Handle Table of Contents (TOC) interactions
      const tocLinks = document.querySelectorAll<HTMLAnchorElement>(".toc-link");
      const headingElements = Array.from(document.querySelectorAll<HTMLHeadingElement>("h2, h3, h4, h5, h6"));
      const tocHighlighter = document.getElementById("toc-highlighter") as HTMLElement | null;
      const toc = document.getElementById("toc");
    
      const SCROLL_OFFSET = 100; // Increased offset for better visibility
      let currentActiveHeading: string | null = null;
      
      function updateHighlighter(activeLink: HTMLAnchorElement | null) {
        if (activeLink && tocHighlighter && toc) {
          const linkRect = activeLink.getBoundingClientRect();
          const tocRect = toc.getBoundingClientRect();
          
          // Update highlighter position and dimensions
          tocHighlighter.style.top = `${linkRect.top - tocRect.top}px`;
          tocHighlighter.style.height = `${linkRect.height}px`;
          tocHighlighter.style.width = `${linkRect.width}px`;
          tocHighlighter.style.opacity = '0.1';
          tocHighlighter.style.transform = 'translateX(0)';
        } else if (tocHighlighter) {
          tocHighlighter.style.opacity = '0';
          tocHighlighter.style.transform = 'translateX(-10px)';
        }
      }

      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href')?.slice(1);
          if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - SCROLL_OFFSET;
              window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
              });
            }
          }
        });
      });
    
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const headingId = entry.target.id;
            const tocLink = document.querySelector<HTMLAnchorElement>(`.toc-link[href="#${headingId}"]`);
            
            if (entry.isIntersecting) {
              // Store the current visible heading
              currentActiveHeading = headingId;
              
              // Update active state
              tocLinks.forEach(link => link.classList.remove("active"));
              tocLink?.classList.add("active");
              
              // Update highlighter
              updateHighlighter(tocLink);
            } else if (headingId === currentActiveHeading) {
              // If the current active heading is scrolled out of view,
              // find the next visible heading
              const visibleHeadings = headingElements.filter(heading => {
                const rect = heading.getBoundingClientRect();
                return rect.top > 0 && rect.top < window.innerHeight;
              });
              
              if (visibleHeadings.length > 0) {
                const nextHeading = visibleHeadings[0];
                const nextLink = document.querySelector<HTMLAnchorElement>(
                  `.toc-link[href="#${nextHeading.id}"]`
                );
                
                tocLinks.forEach(link => link.classList.remove("active"));
                nextLink?.classList.add("active");
                updateHighlighter(nextLink);
                currentActiveHeading = nextHeading.id;
              }
            }
          });
        },
        { 
          threshold: 0.2,
          rootMargin: "-100px 0px -66% 0px"
        }
      );
    
      headingElements.forEach((element) => observer.observe(element));

      // Update highlighter on window resize
      window.addEventListener('resize', () => {
        const activeLink = document.querySelector<HTMLAnchorElement>(".toc-link.active");
        updateHighlighter(activeLink);
      });

      // Enhanced Zen Mode Toggle
      const zenModeToggle = document.getElementById('zenModeToggle');
      const header = document.getElementById('header');
      const sidebar = document.getElementById('sidebar');
      const mainContent = document.getElementById('mainContent');
      const layoutContainer = document.getElementById('layoutContainer');
      const mainHeader = document.querySelector('header'); // Main site header
      const leftSidebar = document.querySelector('aside'); // Left sidebar

      let isZenMode = false;

      zenModeToggle?.addEventListener('click', () => {
        isZenMode = !isZenMode;
        
        if (isZenMode) {
          // Hide elements
          header?.classList.add('hidden', 'pointer-events-none');
          sidebar?.classList.add('opacity-0', 'pointer-events-none');
          mainHeader?.classList.add('hidden', 'pointer-events-none');
          leftSidebar?.classList.add('hidden');
          
          // Adjust main content
          mainContent?.classList.remove('lg:w-3/4');
          mainContent?.classList.add('lg:w-full', 'max-w-3xl');
          layoutContainer?.classList.add('justify-center');
          
          // Remove top margin from main content
          document.querySelector('main')?.classList.remove('mt-16');
          document.querySelector('main')?.classList.add('mt-4');

        } else {
          // Show elements
          header?.classList.remove('hidden', 'pointer-events-none');
          sidebar?.classList.remove('opacity-0', 'pointer-events-none');
          mainHeader?.classList.remove('hidden', 'pointer-events-none');
          leftSidebar?.classList.remove('hidden');
          
          // Reset main content
          mainContent?.classList.add('lg:w-3/4');
          mainContent?.classList.remove('lg:w-full', 'max-w-3xl');
          layoutContainer?.classList.remove('justify-center');
          
          // Restore top margin
          document.querySelector('main')?.classList.remove('mt-4');
          document.querySelector('main')?.classList.add('mt-16');

        }
      });
    });
   
  </script>

  <style>
    .toc-link {
      position: relative;
      z-index: 2;
      transition: all 0.3s ease;
      display: block;
      border-radius: 0.375rem;
    }
    .toc-link.active {
      font-weight: bold;
      color: rgb(59 130 246); /* blue-500 */
    }
    #toc-highlighter {
      z-index: 1;
      pointer-events: none;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0.1;
      background-color: rgb(59 130 246); /* blue-500 */
      border: none;
    }
    .toc-item {
      list-style-type: none;
      margin: 0.5rem 0;
    }
    .toc-item.depth-1 { margin-left: 0; }
    .toc-item.depth-2 { margin-left: 0; }
    .toc-item.depth-3,
    .toc-item.depth-4,
    .toc-item.depth-5,
    .toc-item.depth-6 { margin-left: 1rem; }

    .dark #toc-highlighter {
      background-color: rgb(96 165 250); /* blue-400 */
    }
    .dark .toc-link.active {
      color: rgb(96 165 250); /* blue-400 */
    }
  </style>
</IndexLayout>
