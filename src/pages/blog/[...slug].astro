---
import { type CollectionEntry, getCollection, getEntries } from "astro:content";
import IndexLayout from "../../layouts/indexLayout.astro";
import { Image } from "astro:assets";
import "../../styles/BlogPost.css";
import MyCard from "../../components/blog/Card";
import { AcmeLogo } from "../../components/Navbar/Logo.tsx";
import SummaryDrawer from "../../components/blog/SummaryDrawer.tsx";
import ImageWrapper from "../../components/blog/AssetsWrapper/image.astro"
import { Button } from "@nextui-org/button";
import { getImagePromise } from "../../utils/utils.ts";
import { siteConfig } from '../../site.config';

export async function getStaticPaths() {
	const posts = await getCollection("blog");
  console.log(posts)
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;

const { Content, headings } = await post.render();

let relatedPosts: CollectionEntry<"blog">[] = [];

if (post.data.relatedPosts) {
	relatedPosts = await getEntries(post.data.relatedPosts);
}

const geminiApiKey = import.meta.env.GEMINI_API_KEY;
const showAiFeatures = siteConfig.enableAiFeatures;

---

<IndexLayout title={post.data.title} description={post.data.description} image={post.data.heroImage}>
  <div class="mb-6 transition-all duration-300" id="header">
    <div class="flex items-center space-x-2 mb-4">
      <a
        href="/"
        class="flex gap-2 justify-center items-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-all duration-300 ease-in-out transform hover:scale-105 hover:shadow-md rounded-lg p-2"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 transition-transform duration-300 ease-in-out group-hover:-translate-x-1"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        <span class="text-lg font-semibold text-gray-800 dark:text-white group-hover:underline"
        >Back</span
      >
      </a>
      
    </div>

    <div class="flex items-center justify-between space-x-4 max-w-4xl">
      <div class="flex flex-wrap items-center space-x-4">
        <AcmeLogo />
        <div>
          <h1 class="font-semibold text-gray-900 dark:text-white">
            Jash Naik
          </h1>
          <div
            class="flex flex-wrap gap-2 md:gap-0 items-center space-x-2 text-sm text-gray-600 dark:text-gray-400"
          >
            <span>{post.data.pubDate.toDateString()}</span>
            <span class="flex items-center">
              <span class="w-2 h-2 bg-purple-500 rounded-full mr-1"></span>
              {post.data.group}
              /
              {post.data.title}
            </span>
          </div>
        </div>
      </div>
      {showAiFeatures && <SummaryDrawer client:load geminiApiKey={geminiApiKey}/>}
    </div>
  </div>

  <Button 
    id="zenModeToggle"
    variant="bordered"
    radius="full"
    size="sm"
    color="primary"
    class="fixed bottom-4 right-4 z-50"
  >
    Toggle Zen Mode
  </Button>

  <div class="flex flex-col-reverse lg:flex-row relative transition-all duration-300" id="layoutContainer">
    <div class="w-full lg:w-3/4 py-4 mx-auto transition-all duration-300" id="mainContent">
      <div class="mb-8">
       
        <div class="content prose prose-headings:text-foreground prose-p:text-foreground prose-a:text-sky-700 dark:prose-a:text-fuchsia-600 prose-code:text-sky-700 dark:prose-code:text-fuchsia-500 prose-ul:text-foreground prose-strong:text-foreground prose-strong:font-semibold prose-figcaption:text-foreground dark:prose-li:text-foreground  max-w-none">
         {post.data.heroImage && <Image src={getImagePromise(post.data.heroImage)} alt={post.data.title} width={1000} height={1000} class="w-full h-auto rounded-2xl"/>}
          <Content components={{img:ImageWrapper}}/>
          {post.data.tags && <div class="flex flex-wrap gap-2">
            {post.data.tags.map((tag) => <Button variant="bordered" radius="full" size="sm" color="primary">#{tag}</Button>)}
          </div>}
        </div>
        {
          relatedPosts.length > 0 && (
            <section class="mt-12 border-t pt-8">
              <h2 class="text-2xl font-bold mb-6">Related Posts</h2>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedPosts.map((relatedPost) => (
                  <MyCard
                    title={relatedPost.data.title}
                    description={relatedPost.data.description}
                    href={`/blog/${relatedPost.slug}`}
                  >
                    <div class="m-2 rounded-md">
                    <img
                      src={relatedPost.data.heroImage}
                      alt={relatedPost.data.title}
                      class="w-full h-auto rounded-2xl"
                    />
                    </div>
                  </MyCard>
                ))}
              </div>
            </section>
          )
        }
      </div>
    </div>
    <aside class="w-full lg:w-1/4 p-4 lg:sticky lg:top-12 lg:self-start transition-all duration-300" id="sidebar">
      <h2 class="font-bold mb-4 text-lg">Table of Contents</h2>
      <div class="relative">
        <div
          id="toc-highlighter"
          class="absolute left-0 border-2 border-black dark:border-white rounded-full transition-all duration-300 ease-in-out"
          style="height: 2rem; top: 0; width: 0;"
        ></div>
        <ul id="toc" class="space-y-1 relative">
          {headings.filter((heading) => heading.depth > 1).map((heading) => (
            <li class={`toc-item depth-${heading.depth}`}>
              <a
                href={`#${heading.slug}`}
                class="toc-link block  hover:text-blue-500 transition-colors duration-300 ease-in-out py-1 px-2"
                data-depth={heading.depth}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </aside>
    
  </div>
  
  <script>
    document.addEventListener('astro:page-load', () => {
      // Handle Table of Contents (TOC) interactions
      const tocLinks = document.querySelectorAll<HTMLAnchorElement>(".toc-link");
      const headingElements = Array.from(document.querySelectorAll<HTMLHeadingElement>("h2, h3, h4, h5, h6"));
      const tocHighlighter = document.getElementById("toc-highlighter") as HTMLElement | null;
      const toc = document.getElementById("toc");
    
      const SCROLL_OFFSET = 80;
    
      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href')?.slice(1);
          if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - SCROLL_OFFSET;
              window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
              });
            }
          }
        });
      });
    
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              tocLinks.forEach((link) => link.classList.remove("active"));
              const activeLink = document.querySelector<HTMLAnchorElement>(
                `.toc-link[href="#${entry.target.id}"]`
              );
              if (activeLink && tocHighlighter && toc) {
                activeLink.classList.add("active");
                const linkRect = activeLink.getBoundingClientRect();
                const tocRect = toc.getBoundingClientRect();
                tocHighlighter.style.top = `${linkRect.top - tocRect.top}px`;
                tocHighlighter.style.width = `${linkRect.width}px`;
              }
            }
          });
        },
        { threshold: 0.1 }
      );
    
      headingElements.forEach((element) => observer.observe(element));

      // Enhanced Zen Mode Toggle
      const zenModeToggle = document.getElementById('zenModeToggle');
      const header = document.getElementById('header');
      const sidebar = document.getElementById('sidebar');
      const mainContent = document.getElementById('mainContent');
      const layoutContainer = document.getElementById('layoutContainer');
      const mainHeader = document.querySelector('header'); // Main site header
      const leftSidebar = document.querySelector('aside'); // Left sidebar

      let isZenMode = false;

      zenModeToggle?.addEventListener('click', () => {
        isZenMode = !isZenMode;
        
        if (isZenMode) {
          // Hide elements
          header?.classList.add('opacity-0', 'pointer-events-none');
          sidebar?.classList.add('opacity-0', 'pointer-events-none');
          mainHeader?.classList.add('opacity-0', 'pointer-events-none');
          leftSidebar?.classList.add('hidden');
          
          // Adjust main content
          mainContent?.classList.remove('lg:w-3/4');
          mainContent?.classList.add('lg:w-full', 'max-w-3xl');
          layoutContainer?.classList.add('justify-center');
          
          // Remove top margin from main content
          document.querySelector('main')?.classList.remove('mt-16');
        } else {
          // Show elements
          header?.classList.remove('opacity-0', 'pointer-events-none');
          sidebar?.classList.remove('opacity-0', 'pointer-events-none');
          mainHeader?.classList.remove('opacity-0', 'pointer-events-none');
          leftSidebar?.classList.remove('hidden');
          
          // Reset main content
          mainContent?.classList.add('lg:w-3/4');
          mainContent?.classList.remove('lg:w-full', 'max-w-3xl');
          layoutContainer?.classList.remove('justify-center');
          
          // Restore top margin
          document.querySelector('main')?.classList.add('mt-16');
        }
      });
    });
   
  </script>

  <style>
   

    .toc-link {
      position: relative;
      z-index: 2;
    }
    .toc-link.active {
      font-weight: bold;
    }
    #toc-highlighter {
      z-index: 1;
      pointer-events: none;
    }
    .toc-item {
      list-style-type: none;
    }
    .toc-item.depth-1 { margin-left: 0; }
    .toc-item.depth-2 { margin-left: 0; }
    .toc-item.depth-3,
    .toc-item.depth-4,
    .toc-item.depth-5,
    .toc-item.depth-6 { margin-left: 1rem; }
  </style>
</IndexLayout>
