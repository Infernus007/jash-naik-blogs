---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import LinkPreview from "../components/LinkPreview/index.astro";

type Props = CollectionEntry<"blog">["data"];

const { title, description, heroImage } = Astro.props;

// MDX Component mapping
export const components = {
	a: (props: any) => (
		<LinkPreview
			url={props.href}
			title={props.children}
			imageSrc={heroImage}
			client:load
		/>
	),
};

---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Gabarito:wght@400;500;600;700&display=swap" rel="stylesheet">
	</head>

	<body class="font-gabarito min-h-screen flex flex-col bg-gradient-to-b from-slate-50 via-slate-100 to-slate-200 dark:from-[#0B1120] dark:via-[#0B1120] dark:to-[#0B1120] transition-all duration-300">
		<Header class="relative z-10" />
		<div class="flex-1 relative z-10">
			<article class="content mx-auto prose prose-lg dark:prose-invert max-w-4xl px-4 py-8" data-pagefind-body>
				<div data-pagefind-meta="title">{title}</div>
				<div data-pagefind-meta="description">{description}</div>
				<slot/>
			</article>
		</div>
		<Footer />
	</body>
</html>

<style is:global>
	:root {
		--font-gabarito: 'Gabarito Variable', sans-serif;
	}

	/* Add a subtle texture to the background */
	body::before {
		content: '';
		position: fixed;
		inset: 0;
		background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.03'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
		opacity: 0.1;
		z-index: -1;
		pointer-events: none;
		mix-blend-mode: overlay;
	}

	.dark body::before {
		background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.03'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
	}

	/* Adjust prose colors for light/dark mode */
	.prose {
		color: rgba(0, 0, 0, 0.8);
	}

	.prose h1, .prose h2, .prose h3, .prose h4 {
		color: rgba(0, 0, 0, 0.9);
	}

	.dark .prose {
		color: rgba(255, 255, 255, 0.9);
	}

	.dark .prose h1, 
	.dark .prose h2, 
	.dark .prose h3, 
	.dark .prose h4 {
		color: white;
	}

	.font-gabarito {
		font-family: var(--font-gabarito);
	}

	.prose {
		font-size: 1.125rem;
		line-height: 1.8;
	}

	.prose h1 {
		font-size: 2.5rem;
		font-weight: 700;
		margin-bottom: 1.5rem;
	}

	.prose h2 {
		font-size: 2rem;
		font-weight: 600;
		margin-top: 2rem;
		margin-bottom: 1rem;
	}

	.prose h3 {
		font-size: 1.75rem;
		font-weight: 600;
		margin-top: 1.75rem;
		margin-bottom: 1rem;
	}

	.prose h4 {
		font-size: 1.5rem;
		font-weight: 600;
		margin-top: 1.5rem;
		margin-bottom: 0.75rem;
	}

	.prose p {
		margin-bottom: 1.5rem;
		opacity: 0.9;
	}

	.prose a {
		color: #38bdf8;
		text-decoration: none;
		transition: color 0.2s;
		opacity: 0.9;
	}

	.prose a:hover {
		color: #7dd3fc;
		opacity: 1;
	}

	.prose code {
		background-color: rgba(255, 255, 255, 0.1);
		color: #7dd3fc;
		padding: 0.2em 0.4em;
		border-radius: 0.25rem;
	}


</style>
