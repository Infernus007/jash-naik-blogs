---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Sidebar from "../components/Sidebar/index.astro";
import Search from "astro-pagefind/components/Search";
import Footer from "../components/Footer.astro";
import {ScrollShadow} from "@nextui-org/react";
import { ViewTransitions } from "astro:transitions";
import WebVitals from "../components/Performance/WebVitals.astro";
import SEOAudit from "../components/SEO/Audit.astro";

interface Props {
	title: string;
	description: string;
	image?: string;
	type?: 'website' | 'article';
	publishedDate?: Date;
	modifiedDate?: Date;
	tags?: string[];
	author?: string;
	canonical?: string;
	noindex?: boolean;
}

const { 
	title, 
	description, 
	image, 
	type = "website",
	publishedDate,
	modifiedDate,
	tags,
	author,
	canonical,
	noindex
} = Astro.props;
---

<!doctype html>
<html lang="en" transition:animate="none">
  <head>
    <BaseHead 
      title={title} 
      description={description} 
      image={image}
      type={type}
      publishedDate={publishedDate}
      modifiedDate={modifiedDate}
      tags={tags}
      author={author}
      canonical={canonical}
      noindex={noindex}
    />
    <ViewTransitions />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Gabarito:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script is:inline>
      function getThemePreference() {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      }
      
      function setTheme(theme) {
        if (theme === "dark") {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }
      }
      
      setTheme(getThemePreference());
      
      document.addEventListener("astro:after-swap", () => {
        setTheme(getThemePreference());
      });
    </script>
  </head>
  <body class="font-gabarito min-h-screen flex flex-col bg-gradient-to-b from-slate-50 via-slate-100 to-slate-200 dark:from-[#0B1120] dark:via-[#0B1120] dark:to-[#0B1120] transition-all duration-300">
    <Header class="transition-all duration-300 relative z-10" />
    <main class="flex flex-1 mt-16 container mx-auto px-12 max-w-[1920px] transition-all duration-300 relative z-10" data-pagefind-body>
      <div class="hidden md:block w-96 flex-shrink-0 transition-all duration-300">
        <ScrollShadow className="max-h-[80vh] sticky top-16" client:load>
          <Sidebar />
        </ScrollShadow>
      </div>
      <div class="flex-1 w-full max-w-full md:max-w-[calc(100%-24rem)] ms-16 transition-all duration-300">
        <slot />
      </div>

      <div id="modal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-start justify-center pt-20 -z-10 opacity-0 transition-opacity duration-300">
        <div class="bg-white box-border dark:bg-gray-900 w-full max-w-xl mx-auto overflow-hidden
                    border-1 border-background rounded-3xl shadow-2xl animate-in zoom-in-95">
          <div class="py-3 px-6">
            <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-800">
              <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-100">Explore</h2>
              <button id="close-modal" 
                      class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200
                             p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                      aria-label="Close modal">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <div class="max-h-[calc(100vh-200px)] overflow-y-auto mt-5">
              <Search
              id="search"
              className="pagefind-ui"
              uiOptions={{
                showImages: false,
              }}/>
            </div>
          </div>
        </div>
      </div>
    </main>
    <Footer/>
    
    <!-- Performance Monitoring -->
    <WebVitals />
    
    <!-- SEO Audit (Development Only) -->
    <SEOAudit />

    <style is:global>
      :root {
        --font-gabarito: 'Gabarito Variable', system-ui;
        --font-gabarito-mono: 'Gabarito Mono', monospace;
      }

      /* Add a subtle texture to the background */
      body::before {
        content: '';
        position: fixed;
        inset: 0;
        background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.03'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
        opacity: 0.1;
        z-index: -1;
        pointer-events: none;
        mix-blend-mode: overlay;
      }

      .dark body::before {
        background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.03'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
      }

      /* Adjust prose colors for light/dark mode */
      .prose {
        color: rgba(0, 0, 0, 0.8);
      }

      .prose h1, .prose h2, .prose h3, .prose h4 {
        color: rgba(0, 0, 0, 0.9);
      }

      .dark .prose {
        color: rgba(255, 255, 255, 0.9);
      }

      .dark .prose h1, 
      .dark .prose h2, 
      .dark .prose h3, 
      .dark .prose h4 {
        color: white;
      }

      .font-gabarito {
        font-family: var(--font-gabarito);
        font-variation-settings: 'wght' 400;
        font-feature-settings: 'kern' 1;
      }

      .font-gabarito-mono {
        font-family: var(--font-gabarito-mono);
      }

      /* Apply Gabarito to all text elements */
      h1, h2, h3, h4, h5, h6, p, span, a, button, input, textarea, select, label {
        font-family: var(--font-gabarito);
        font-variation-settings: 'wght' 400;
        font-feature-settings: 'kern' 1;
      }

      /* Apply Gabarito Mono to code elements */
      code, pre, .code, .monospace {
        font-family: var(--font-gabarito-mono);
      }

      /* Adjust prose typography */
      .prose {
        font-family: var(--font-gabarito);
        font-size: 1.125rem;
        line-height: 1.8;
        font-variation-settings: 'wght' 400;
        font-feature-settings: 'kern' 1;
      }

      .prose h1 {
        font-size: 2.5rem;
        font-variation-settings: 'wght' 700;
        margin-bottom: 1.5rem;
      }

      .prose h2 {
        font-size: 2rem;
        font-variation-settings: 'wght' 600;
        margin-top: 2rem;
        margin-bottom: 1rem;
      }

      .prose h3 {
        font-size: 1.75rem;
        font-variation-settings: 'wght' 600;
        margin-top: 1.75rem;
        margin-bottom: 1rem;
      }

      .prose p {
        margin-bottom: 1.5rem;
        font-variation-settings: 'wght' 400;
      }

      .prose strong {
        font-variation-settings: 'wght' 600;
      }

      .prose a {
        color: #3b82f6;
        text-decoration: none;
        transition: color 0.2s;
        font-variation-settings: 'wght' 500;
      }

      .prose a:hover {
        color: #2563eb;
      }

      .prose code {
        font-family: var(--font-gabarito-mono);
        font-size: 0.9em;
        padding: 0.2em 0.4em;
        border-radius: 0.25rem;
        background-color: oklch(96.7% 0.003 264.542);
      }


      .dark .prose :not(pre) > code {
  background-color: #1f2937;
}


  

      /* Code block specific styles */
      pre {
        font-family: var(--font-gabarito-mono);
        font-size: 0.9em;
        line-height: 1.7;
      }

      /* Inline code */
      :not(pre) > code {
        font-family: var(--font-gabarito-mono);
        font-size: 0.9em;
        padding: 0.2em 0.4em;
        border-radius: 0.25rem;
        background-color: #f3f4f6;
      }

    
    </style>

    <script>
      document.addEventListener('astro:pad', () => {
        const getThemePreference = () => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
        };
        const isDark = getThemePreference() === "dark";
        document.documentElement.classList[isDark ? "add" : "remove"]("dark");

        if (typeof localStorage !== "undefined") {
          const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
          });
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
          });
        }
      });
    </script>

    <script>
      function handleResize() {
        const sidebarContainer = document.getElementById('sidebar-container');
        if (sidebarContainer) {
          if (window.innerWidth >= 768 && !sidebarContainer.hasChildNodes()) {
            // Fetch and insert the sidebar content
            fetch('/sidebar-content')
              .then(response => response.text())
              .then(html => {
                sidebarContainer.innerHTML = html;
              });
          } else if (window.innerWidth < 768 && sidebarContainer.hasChildNodes()) {
            // Remove the sidebar content
            sidebarContainer.innerHTML = '';
          }
        }
      }

      // Initial check on load
      document.addEventListener('astro:page-load', handleResize);

      // Listen for window resize events
      window.addEventListener('resize', handleResize);
    </script>
  </body>
</html>
