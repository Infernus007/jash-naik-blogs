---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Sidebar from "../components/Sidebar/index.astro";
import Search from "astro-pagefind/components/Search";
import Footer from "../components/Footer.astro";
import {ScrollShadow} from "@nextui-org/react";
import { ViewTransitions } from "astro:transitions";

interface Props {
	title: string;
	description: string;
	image?: string;
}

const { title, description, image } = Astro.props;
---

<!doctype html>
<html lang="en" transition:animate="none">
  <head>
    <BaseHead title={title} description={description} image={image} />
    <ViewTransitions />
    <script is:inline>
      function getThemePreference() {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      }
      
      function setTheme(theme) {
        if (theme === "dark") {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }
      }
      
      setTheme(getThemePreference());
      
      document.addEventListener("astro:after-swap", () => {
        setTheme(getThemePreference());
      });
    </script>
  </head>
  <body class="bg-stone-200 dark:bg-gray-900 min-h-screen flex flex-col">
    <Header />
    <main class="flex flex-1 mt-16">
      <div id="sidebar-container" class="hidden sm:block">
        <!-- Sidebar will be inserted here if screen is large enough -->
      </div>
      <div class="p-5 lg:ps-[78px] flex-1 w-full sm:w-auto">
        <slot />
      </div>

      <div id="modal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-start justify-center pt-20 -z-10 opacity-0 transition-opacity duration-300">
        <div class="bg-white box-border dark:bg-gray-900 w-full max-w-xl mx-auto overflow-hidden
                    border-1 border-background rounded-3xl shadow-2xl animate-in zoom-in-95">
          <div class="py-3 px-6">
            <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-800">
              <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-100">Explore</h2>
              <button id="close-modal" 
                      class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200
                             p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                      aria-label="Close modal">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <div class="max-h-[calc(100vh-200px)] overflow-y-auto mt-5">
              <Search
              id="search"
              className="pagefind-ui"
              uiOptions={{
                showImages: false,
              }}/> <!-- Your existing Search component goes here -->
            </div>
          </div>
        </div>
      </div>
      
      
    </main>
    <Footer/>

    <script>
      document.addEventListener('astro:pad', () => {
        const getThemePreference = () => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
        };
        const isDark = getThemePreference() === "dark";
        document.documentElement.classList[isDark ? "add" : "remove"]("dark");

        if (typeof localStorage !== "undefined") {
          const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
          });
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
          });
        }
      });
    </script>

    <script>
      function handleResize() {
        const sidebarContainer = document.getElementById('sidebar-container');
        if (window.innerWidth >= 640 && !sidebarContainer.hasChildNodes()) {
          // Fetch and insert the sidebar content
          fetch('/sidebar-content')
            .then(response => response.text())
            .then(html => {
              sidebarContainer.innerHTML = html;
            });
        } else if (window.innerWidth < 640 && sidebarContainer.hasChildNodes()) {
          // Remove the sidebar content
          sidebarContainer.innerHTML = '';
        }
      }

      // Initial check on load
      document.addEventListener('astro:page-load', handleResize);

      // Listen for window resize events
      window.addEventListener('resize', handleResize);
    </script>
  </body>
</html>
